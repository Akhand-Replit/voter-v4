import streamlit as st
from utils.database import Database
from utils.styling import apply_custom_styling
from datetime import datetime

# Initialize database connection
db = Database()

# Set page style
apply_custom_styling()

st.title("‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßÉ‡¶ï‡ßç‡¶∑ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ üå≥")
st.markdown("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# --- Session State Initialization ---
if 'selected_main_voter_id' not in st.session_state:
    st.session_state.selected_main_voter_id = None
if 'family_search_query' not in st.session_state:
    st.session_state.family_search_query = ""
if 'new_family_member_data' not in st.session_state:
    st.session_state.new_family_member_data = {
        "‡¶®‡¶æ‡¶Æ": "", "‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ": "", "‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ": "", "‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç": "",
        "gender": "", "‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ": ""
    }
if 'relationship_type' not in st.session_state:
    st.session_state.relationship_type = "‡¶™‡¶ø‡¶§‡¶æ" # Default relationship

# Helper function to get bidirectional relationships
def get_bidirectional_relationships(relationship_type, source_gender=None, target_gender=None):
    """
    Returns the relationship types for both directions based on the user's input.
    The source is the main voter, target is the family member being added.
    """
    relationships = {
        "‡¶™‡¶ø‡¶§‡¶æ": {"source_to_target": "‡¶™‡¶ø‡¶§‡¶æ", "target_to_source": "‡¶∏‡¶®‡ßç‡¶§‡¶æ‡¶®"},
        "‡¶Æ‡¶æ‡¶§‡¶æ": {"source_to_target": "‡¶Æ‡¶æ‡¶§‡¶æ", "target_to_source": "‡¶∏‡¶®‡ßç‡¶§‡¶æ‡¶®"},
        "‡¶∏‡ßç‡¶¨‡¶æ‡¶Æ‡ßÄ": {"source_to_target": "‡¶∏‡ßç‡¶¨‡¶æ‡¶Æ‡ßÄ", "target_to_source": "‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ"},
        "‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ": {"source_to_target": "‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ", "target_to_source": "‡¶∏‡ßç‡¶¨‡¶æ‡¶Æ‡ßÄ"},
        "‡¶õ‡ßá‡¶≤‡ßá": {"source_to_target": "‡¶õ‡ßá‡¶≤‡ßá", "target_to_source": "‡¶™‡¶ø‡¶§‡¶æ"},
        "‡¶Æ‡ßá‡ßü‡ßá": {"source_to_target": "‡¶Æ‡ßá‡ßü‡ßá", "target_to_source": "‡¶Æ‡¶æ‡¶§‡¶æ"},
        "‡¶≠‡¶æ‡¶á": {"source_to_target": "‡¶≠‡¶æ‡¶á", "target_to_source": "‡¶≠‡¶æ‡¶á/‡¶¨‡ßã‡¶®"},
        "‡¶¨‡ßã‡¶®": {"source_to_target": "‡¶¨‡ßã‡¶®", "target_to_source": "‡¶≠‡¶æ‡¶á/‡¶¨‡ßã‡¶®"},
        "‡¶¶‡¶æ‡¶¶‡¶æ": {"source_to_target": "‡¶¶‡¶æ‡¶¶‡¶æ", "target_to_source": "‡¶®‡¶æ‡¶§‡¶ø/‡¶®‡¶æ‡¶§‡¶®‡¶ø"},
        "‡¶¶‡¶æ‡¶¶‡ßÄ": {"source_to_target": "‡¶¶‡¶æ‡¶¶‡ßÄ", "target_to_source": "‡¶®‡¶æ‡¶§‡¶ø/‡¶®‡¶æ‡¶§‡¶®‡¶ø"},
        "‡¶®‡¶æ‡¶§‡¶ø": {"source_to_target": "‡¶®‡¶æ‡¶§‡¶ø", "target_to_source": "‡¶¶‡¶æ‡¶¶‡¶æ/‡¶¶‡¶æ‡¶¶‡ßÄ"},
        "‡¶®‡¶æ‡¶§‡¶®‡¶ø": {"source_to_target": "‡¶®‡¶æ‡¶§‡¶®‡¶ø", "target_to_source": "‡¶¶‡¶æ‡¶¶‡¶æ/‡¶¶‡¶æ‡¶¶‡ßÄ"},
        "‡¶ö‡¶æ‡¶ö‡¶æ": {"source_to_target": "‡¶ö‡¶æ‡¶ö‡¶æ", "target_to_source": "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ/‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø"},
        "‡¶ö‡¶æ‡¶ö‡ßÄ": {"source_to_target": "‡¶ö‡¶æ‡¶ö‡ßÄ", "target_to_source": "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ/‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø"},
        "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ": {"source_to_target": "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ", "target_to_source": "‡¶ö‡¶æ‡¶ö‡¶æ/‡¶ö‡¶æ‡¶ö‡ßÄ"},
        "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø": {"source_to_target": "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø", "target_to_source": "‡¶ö‡¶æ‡¶ö‡¶æ/‡¶ö‡¶æ‡¶ö‡ßÄ"},
        "‡¶Æ‡¶æ‡¶Æ‡¶æ": {"source_to_target": "‡¶Æ‡¶æ‡¶Æ‡¶æ", "target_to_source": "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá/‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø"},
        "‡¶Æ‡¶æ‡¶Æ‡¶ø": {"source_to_target": "‡¶Æ‡¶æ‡¶Æ‡¶ø", "target_to_source": "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá/‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø"},
        "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá": {"source_to_target": "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá", "target_to_source": "‡¶Æ‡¶æ‡¶Æ‡¶æ/‡¶Æ‡¶æ‡¶Æ‡¶ø"},
        "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø": {"source_to_target": "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø", "target_to_source": "‡¶Æ‡¶æ‡¶Æ‡¶æ/‡¶Æ‡¶æ‡¶Æ‡¶ø"},
        "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞": {"source_to_target": "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞", "target_to_source": "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á/‡¶¨‡¶â‡¶Æ‡¶æ"},
        "‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø": {"source_to_target": "‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø", "target_to_source": "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á/‡¶¨‡¶â‡¶Æ‡¶æ"},
        "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á": {"source_to_target": "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á", "target_to_source": "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞/‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø"},
        "‡¶¨‡¶â‡¶Æ‡¶æ": {"source_to_target": "‡¶¨‡¶â‡¶Æ‡¶æ", "target_to_source": "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞/‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø"},
        "‡¶∂‡¶æ‡¶≤‡¶æ": {"source_to_target": "‡¶∂‡¶æ‡¶≤‡¶æ", "target_to_source": "‡¶≠‡¶ó‡ßç‡¶®‡¶ø‡¶™‡¶§‡¶ø"},
        "‡¶∂‡¶æ‡¶≤‡ßÄ": {"source_to_target": "‡¶∂‡¶æ‡¶≤‡ßÄ", "target_to_source": "‡¶≠‡¶ó‡ßç‡¶®‡¶ø‡¶™‡¶§‡¶ø"},
        "‡¶¶‡ßá‡¶¨‡¶∞": {"source_to_target": "‡¶¶‡ßá‡¶¨‡¶∞", "target_to_source": "‡¶¨‡¶â‡¶¶‡¶ø"},
        "‡¶®‡¶®‡¶¶": {"source_to_target": "‡¶®‡¶®‡¶¶", "target_to_source": "‡¶¨‡¶â‡¶¶‡¶ø"},
        "‡¶≠‡¶æ‡¶∏‡ßÅ‡¶∞": {"source_to_target": "‡¶≠‡¶æ‡¶∏‡ßÅ‡¶∞", "target_to_source": "‡¶¨‡¶â‡¶¶‡¶ø"},
        "‡¶¨‡¶â‡¶¶‡¶ø": {"source_to_target": "‡¶¨‡¶â‡¶¶‡¶ø", "target_to_source": "‡¶¶‡ßá‡¶¨‡¶∞/‡¶≠‡¶æ‡¶∏‡ßÅ‡¶∞"},
        "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø": {"source_to_target": "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø", "target_to_source": "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø"}
    }
    return relationships.get(relationship_type, {"source_to_target": relationship_type, "target_to_source": "‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø"})


# --- Main Voter Selection ---
st.header("‡ßß. ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
all_voters = db.get_all_voters_for_search()
voter_options = {f"{voter['‡¶®‡¶æ‡¶Æ']} ({voter['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç'] or 'N/A'}) - ID: {voter['id']}" : voter['id'] for voter in all_voters}

selected_option = st.selectbox(
    "‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
    options=[""] + list(voter_options.keys()),
    index=0,
    format_func=lambda x: x if x else "‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"
)

if selected_option:
    st.session_state.selected_main_voter_id = voter_options[selected_option]
    main_voter_details = db.get_record_by_id(st.session_state.selected_main_voter_id)
    if main_voter_details:
        st.subheader(f"‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞: {main_voter_details['‡¶®‡¶æ‡¶Æ']}")
        col1, col2 = st.columns([1, 2])
        with col1:
            st.image(main_voter_details.get('photo_link', 'https://placehold.co/100x100/EEE/31343C?text=No+Image'), width=100)
        with col2:
            st.write(f"**‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç:** {main_voter_details['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç']}")
            st.write(f"**‡¶™‡¶ø‡¶§‡¶æ:** {main_voter_details['‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']}")
            st.write(f"**‡¶Æ‡¶æ‡¶§‡¶æ:** {main_voter_details['‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']}")
            st.write(f"**‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ:** {main_voter_details['‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ']}")
            st.write(f"**‡¶≤‡¶ø‡¶ô‡ßç‡¶ó:** {main_voter_details['gender']}")
            st.write(f"**‡¶¨‡¶Ø‡¶º‡¶∏:** {main_voter_details['age'] if main_voter_details['age'] else 'N/A'}")
    else:
        st.warning("‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
else:
    st.session_state.selected_main_voter_id = None
    st.info("‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá‡•§")

st.markdown("---")

if st.session_state.selected_main_voter_id:
    st.header("‡ß®. ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")

    tab1, tab2 = st.tabs(["‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®", "‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®"])

    with tab1:
        st.subheader("‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
        search_col1, search_col2 = st.columns([3, 1])
        with search_col1:
            st.session_state.family_search_query = st.text_input("‡¶®‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®:", value=st.session_state.family_search_query, key="family_search_input")
        with search_col2:
            st.markdown("<br>", unsafe_allow_html=True) # For alignment
            search_button = st.button("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", key="search_family_member_button")

        found_members = []
        if search_button and st.session_state.family_search_query:
            search_criteria = {
                "‡¶®‡¶æ‡¶Æ": st.session_state.family_search_query,
                "‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç": st.session_state.family_search_query
            }
            # This search will return records matching either name or voter_no
            found_members = db.search_records_advanced(search_criteria)
            # Filter out the main voter themselves
            found_members = [m for m in found_members if m['id'] != st.session_state.selected_main_voter_id]

        if found_members:
            st.write(f"**{len(found_members)} ‡¶ú‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:**")
            for member in found_members:
                col_m1, col_m2, col_m3 = st.columns([0.5, 3, 1])
                with col_m1:
                    st.image(member.get('photo_link', 'https://placehold.co/50x50/EEE/31343C?text=No+Image'), width=50)
                with col_m2:
                    st.markdown(f"**‡¶®‡¶æ‡¶Æ:** {member['‡¶®‡¶æ‡¶Æ']}<br>**‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç:** {member['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç']}<br>**‡¶™‡¶ø‡¶§‡¶æ:** {member['‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']}", unsafe_allow_html=True)
                with col_m3:
                    relationship_options = ["‡¶™‡¶ø‡¶§‡¶æ", "‡¶Æ‡¶æ‡¶§‡¶æ", "‡¶∏‡ßç‡¶¨‡¶æ‡¶Æ‡ßÄ", "‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ", "‡¶õ‡ßá‡¶≤‡ßá", "‡¶Æ‡ßá‡ßü‡ßá", "‡¶≠‡¶æ‡¶á", "‡¶¨‡ßã‡¶®", "‡¶¶‡¶æ‡¶¶‡¶æ", "‡¶¶‡¶æ‡¶¶‡ßÄ", "‡¶®‡¶æ‡¶§‡¶ø", "‡¶®‡¶æ‡¶§‡¶®‡¶ø", "‡¶ö‡¶æ‡¶ö‡¶æ", "‡¶ö‡¶æ‡¶ö‡ßÄ", "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ", "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø", "‡¶Æ‡¶æ‡¶Æ‡¶æ", "‡¶Æ‡¶æ‡¶Æ‡¶ø", "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá", "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø", "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞", "‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø", "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á", "‡¶¨‡¶â‡¶Æ‡¶æ", "‡¶∂‡¶æ‡¶≤‡¶æ", "‡¶∂‡¶æ‡¶≤‡ßÄ", "‡¶¶‡ßá‡¶¨‡¶∞", "‡¶®‡¶®‡¶¶", "‡¶≠‡¶æ‡¶∏‡ßÅ‡¶∞", "‡¶¨‡¶â‡¶¶‡¶ø", "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø"]
                    selected_relation = st.selectbox(
                        f"‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ({member['id']}):",
                        options=relationship_options,
                        key=f"relation_select_{member['id']}"
                    )
                    if st.button(f"‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ({member['‡¶®‡¶æ‡¶Æ']})", key=f"add_existing_member_{member['id']}"):
                        main_voter_gender = main_voter_details.get('gender')
                        member_gender = member.get('gender')
                        
                        # Get bidirectional relationships based on the selected relationship from the main voter's perspective
                        rel_map = get_bidirectional_relationships(selected_relation, main_voter_gender, member_gender)
                        
                        st.info(f"Adding connection: Main Voter ID: {st.session_state.selected_main_voter_id}, Target ID: {member['id']}, Relationship: {rel_map['source_to_target']}")
                        # Add connection from main voter to family member
                        success1 = db.add_family_connection(
                            st.session_state.selected_main_voter_id,
                            member['id'],
                            rel_map["source_to_target"]
                        )
                        st.info(f"Connection 1 Success: {success1}")

                        # Add connection from family member to main voter
                        st.info(f"Adding inverse connection: Source ID: {member['id']}, Target ID: {st.session_state.selected_main_voter_id}, Relationship: {rel_map['target_to_source']}")
                        success2 = db.add_family_connection(
                            member['id'],
                            st.session_state.selected_main_voter_id,
                            rel_map["target_to_source"]
                        )
                        st.info(f"Connection 2 Success: {success2}")

                        if success1 and success2:
                            st.success(f"{member['‡¶®‡¶æ‡¶Æ']} ‡¶ï‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï '{selected_relation}' ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
                            st.session_state.family_search_query = "" # Clear search
                            st.rerun() # Rerun to update family list
                        else:
                            st.error(f"{member['‡¶®‡¶æ‡¶Æ']} ‡¶ï‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§")
        elif search_button and not found_members and st.session_state.family_search_query:
            st.info(f"'{st.session_state.family_search_query}' ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
        
    with tab2:
        st.subheader("‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®")
        with st.form("new_family_member_form"):
            st.session_state.new_family_member_data['‡¶®‡¶æ‡¶Æ'] = st.text_input("‡¶®‡¶æ‡¶Æ", value=st.session_state.new_family_member_data['‡¶®‡¶æ‡¶Æ'], key="new_member_name")
            st.session_state.new_family_member_data['‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ'] = st.text_input("‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ", value=st.session_state.new_family_member_data['‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ'], key="new_member_father")
            st.session_state.new_family_member_data['‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ'] = st.text_input("‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ", value=st.session_state.new_family_member_data['‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ'], key="new_member_mother")
            st.session_state.new_family_member_data['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç'] = st.text_input("‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)", value=st.session_state.new_family_member_data['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç'], key="new_member_voter_no")
            st.session_state.new_family_member_data['gender'] = st.selectbox("‡¶≤‡¶ø‡¶ô‡ßç‡¶ó", ["", "‡¶™‡ßÅ‡¶∞‡ßÅ‡¶∑", "‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ", "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø"], key="new_member_gender")
            
            # Date of Birth input with conversion
            dob_str = st.text_input("‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ (DD-MM-YYYY)", value=st.session_state.new_family_member_data['‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ'], key="new_member_dob_input")
            st.session_state.new_family_member_data['‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ'] = dob_str # Store as string

            relationship_options = ["‡¶™‡¶ø‡¶§‡¶æ", "‡¶Æ‡¶æ‡¶§‡¶æ", "‡¶∏‡ßç‡¶¨‡¶æ‡¶Æ‡ßÄ", "‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ", "‡¶õ‡ßá‡¶≤‡ßá", "‡¶Æ‡ßá‡ßü‡ßá", "‡¶≠‡¶æ‡¶á", "‡¶¨‡ßã‡¶®", "‡¶¶‡¶æ‡¶¶‡¶æ", "‡¶¶‡¶æ‡¶¶‡ßÄ", "‡¶®‡¶æ‡¶§‡¶ø", "‡¶®‡¶æ‡¶§‡¶®‡¶ø", "‡¶ö‡¶æ‡¶ö‡¶æ", "‡¶ö‡¶æ‡¶ö‡ßÄ", "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ", "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø", "‡¶Æ‡¶æ‡¶Æ‡¶æ", "‡¶Æ‡¶æ‡¶Æ‡¶ø", "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá", "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø", "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞", "‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø", "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á", "‡¶¨‡¶â‡¶Æ‡¶æ", "‡¶∂‡¶æ‡¶≤‡¶æ", "‡¶∂‡¶æ‡¶≤‡ßÄ", "‡¶¶‡ßá‡¶¨‡¶∞", "‡¶®‡¶®‡¶¶", "‡¶≠‡¶æ‡¶∏‡ßÅ‡¶∞", "‡¶¨‡¶â‡¶¶‡¶ø", "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø"]
            st.session_state.relationship_type = st.selectbox(
                "‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï:",
                options=relationship_options,
                key="new_member_relation_select"
            )

            submitted = st.form_submit_button("‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")

            if submitted:
                if not st.session_state.new_family_member_data['‡¶®‡¶æ‡¶Æ']:
                    st.error("‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§")
                else:
                    try:
                        # Calculate age if DOB is provided
                        age = None
                        if st.session_state.new_family_member_data['‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ']:
                            try:
                                dob = datetime.strptime(st.session_state.new_family_member_data['‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ'], '%d-%m-%Y')
                                today = datetime.today()
                                age = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))
                            except ValueError:
                                st.warning("‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡ßá‡¶∞ ‡¶¨‡¶ø‡¶®‡ßç‡¶Ø‡¶æ‡¶∏ ‡¶≠‡ßÅ‡¶≤ (DD-MM-YYYY)‡•§ ‡¶¨‡¶Ø‡¶º‡¶∏ ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§")
                                age = None

                        # Add new record to database (using a dummy batch_id or a generic "Family Tree Additions" batch)
                        # First, ensure a batch exists for manually added family members
                        family_batch_id = db.add_batch("Family Tree Additions")

                        new_member_record_data = {
                            "‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç": "", # Can be empty or generated
                            "‡¶®‡¶æ‡¶Æ": st.session_state.new_family_member_data['‡¶®‡¶æ‡¶Æ'],
                            "‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç": st.session_state.new_family_member_data['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç'],
                            "‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ": st.session_state.new_family_member_data['‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ'],
                            "‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ": st.session_state.new_family_member_data['‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ'],
                            "‡¶™‡ßá‡¶∂‡¶æ": "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ", # Default
                            "occupation_details": "",
                            "‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ": st.session_state.new_family_member_data['‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ'],
                            "‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ": "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ", # Default
                            "phone_number": "", "whatsapp_number": "",
                            "facebook_link": "", "tiktok_link": "", "youtube_link": "", "insta_link": "",
                            "photo_link": 'https://placehold.co/100x100/EEE/31343C?text=No+Image',
                            "description": "‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßÉ‡¶ï‡ßç‡¶∑‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
                            "political_status": "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ",
                            "relationship_status": "Regular",
                            "gender": st.session_state.new_family_member_data['gender'],
                            "age": age
                        }
                        new_member_id = db.add_record(family_batch_id, "family_tree_manual_entry", new_member_record_data)
                        db.commit_changes() # Commit the new record addition

                        if new_member_id:
                            main_voter_gender = main_voter_details.get('gender')
                            new_member_gender = new_member_record_data.get('gender')

                            rel_map = get_bidirectional_relationships(st.session_state.relationship_type, main_voter_gender, new_member_gender)
                            
                            st.info(f"Adding connection: Main Voter ID: {st.session_state.selected_main_voter_id}, Target ID: {new_member_id}, Relationship: {rel_map['source_to_target']}")
                            # Add connection from main voter to new family member
                            success1 = db.add_family_connection(
                                st.session_state.selected_main_voter_id,
                                new_member_id,
                                rel_map["source_to_target"]
                            )
                            st.info(f"Connection 1 Success: {success1}")

                            st.info(f"Adding inverse connection: Source ID: {new_member_id}, Target ID: {st.session_state.selected_main_voter_id}, Relationship: {rel_map['target_to_source']}")
                            # Add connection from new family member to main voter
                            success2 = db.add_family_connection(
                                new_member_id,
                                st.session_state.selected_main_voter_id,
                                rel_map["target_to_source"]
                            )
                            st.info(f"Connection 2 Success: {success2}")

                            if success1 and success2:
                                st.success(f"‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø '{st.session_state.new_family_member_data['‡¶®‡¶æ‡¶Æ']}' ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßÉ‡¶ï‡ßç‡¶∑‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
                                # Clear form data
                                st.session_state.new_family_member_data = {
                                    "‡¶®‡¶æ‡¶Æ": "", "‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ": "", "‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ": "", "‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç": "",
                                    "gender": "", "‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ": ""
                                }
                                st.rerun() # Rerun to update family list
                            else:
                                st.error("‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§")
                        else:
                            st.error("‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§")
                    except Exception as e:
                        st.error(f"‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {e}")
                        db.rollback_changes()

    st.markdown("---")

    st.header("‡ß©. ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßÉ‡¶ï‡ßç‡¶∑ ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶®")
    family_connections = db.get_family_connections_for_record(st.session_state.selected_main_voter_id)

    if family_connections:
        st.write(f"**{main_voter_details['‡¶®‡¶æ‡¶Æ']} ‡¶è‡¶∞ ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶ó‡¶£:**")
        for i, connection in enumerate(family_connections):
            col_d1, col_d2, col_d3 = st.columns([0.5, 3, 1])
            with col_d1:
                st.image(connection.get('photo_link', 'https://placehold.co/50x50/EEE/31343C?text=No+Image'), width=50)
            with col_d2:
                st.markdown(f"**‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï:** {connection['relationship_to_source']}<br>"
                            f"**‡¶®‡¶æ‡¶Æ:** {connection['‡¶®‡¶æ‡¶Æ']}<br>"
                            f"**‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç:** {connection['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç'] or 'N/A'}", unsafe_allow_html=True)
            with col_d3:
                if st.button("‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", key=f"delete_connection_{connection['id']}_{i}"):
                    # To delete a bidirectional relationship, we need to delete both sides
                    # First, delete the connection from source to target
                    db.delete_family_connection(
                        st.session_state.selected_main_voter_id,
                        connection['id'],
                        connection['relationship_to_source']
                    )
                    # Then, infer the reverse relationship and delete it
                    # This is a bit tricky and might require a more robust relationship mapping
                    # For simplicity, let's just delete the direct link for now.
                    # A more advanced solution would involve storing the reverse relationship type explicitly
                    # when adding, or having a lookup table for inverse relationships.
                    
                    # For a robust deletion, we need to find the inverse relationship
                    # This is a simplified approach, assuming we can infer the inverse
                    # based on the main relationship types.
                    # This part needs careful consideration for all possible relationships.
                    
                    # For now, let's just delete the direct link. A full bidirectional delete
                    # would require knowing the exact inverse relationship type.
                    # To make it truly bidirectional delete, we would need to pass the
                    # original relationship type and then calculate its inverse.
                    # For example, if A is "Father" of B, then B is "Child" of A.
                    # If we delete A->B as "Father", we also need to delete B->A as "Child".
                    
                    # Let's add a simple inverse relationship mapping for deletion
                    inverse_relationships = {
                        "‡¶™‡¶ø‡¶§‡¶æ": "‡¶∏‡¶®‡ßç‡¶§‡¶æ‡¶®", "‡¶Æ‡¶æ‡¶§‡¶æ": "‡¶∏‡¶®‡ßç‡¶§‡¶æ‡¶®", "‡¶∏‡ßç‡¶¨‡¶æ‡¶Æ‡ßÄ": "‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ", "‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ": "‡¶∏‡ßç‡¶¨‡¶æ‡¶Æ‡ßÄ",
                        "‡¶õ‡ßá‡¶≤‡ßá": "‡¶™‡¶ø‡¶§‡¶æ", "‡¶Æ‡ßá‡ßü‡ßá": "‡¶Æ‡¶æ‡¶§‡¶æ", "‡¶≠‡¶æ‡¶á": "‡¶≠‡¶æ‡¶á/‡¶¨‡ßã‡¶®", "‡¶¨‡ßã‡¶®": "‡¶≠‡¶æ‡¶á/‡¶¨‡ßã‡¶®",
                        "‡¶¶‡¶æ‡¶¶‡¶æ": "‡¶®‡¶æ‡¶§‡¶ø/‡¶®‡¶æ‡¶§‡¶®‡¶ø", "‡¶¶‡¶æ‡¶¶‡ßÄ": "‡¶®‡¶æ‡¶§‡¶ø/‡¶®‡¶æ‡¶§‡¶®‡¶ø", "‡¶®‡¶æ‡¶§‡¶ø": "‡¶¶‡¶æ‡¶¶‡¶æ/‡¶¶‡¶æ‡¶¶‡ßÄ", "‡¶®‡¶æ‡¶§‡¶®‡¶ø": "‡¶¶‡¶æ‡¶¶‡¶æ/‡¶¶‡¶æ‡¶¶‡ßÄ",
                        "‡¶ö‡¶æ‡¶ö‡¶æ": "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ/‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø", "‡¶ö‡¶æ‡¶ö‡ßÄ": "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ/‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø", "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ": "‡¶ö‡¶æ‡¶ö‡¶æ/‡¶ö‡¶æ‡¶ö‡ßÄ", "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø": "‡¶ö‡¶æ‡¶ö‡¶æ/‡¶ö‡¶æ‡¶ö‡ßÄ",
                        "‡¶Æ‡¶æ‡¶Æ‡¶æ": "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá/‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø", "‡¶Æ‡¶æ‡¶Æ‡¶ø": "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá/‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø", "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá": "‡¶Æ‡¶æ‡¶Æ‡¶æ/‡¶Æ‡¶æ‡¶Æ‡¶ø", "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø": "‡¶Æ‡¶æ‡¶Æ‡¶æ/‡¶Æ‡¶æ‡¶Æ‡¶ø",
                        "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞": "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á/‡¶¨‡¶â‡¶Æ‡¶æ", "‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø": "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á/‡¶¨‡¶â‡¶Æ‡¶æ", "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á": "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞/‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø", "‡¶¨‡¶â‡¶Æ‡¶æ": "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞/‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø",
                        "‡¶∂‡¶æ‡¶≤‡¶æ": "‡¶≠‡¶ó‡ßç‡¶®‡¶ø‡¶™‡¶§‡¶ø", "‡¶∂‡¶æ‡¶≤‡ßÄ": "‡¶≠‡¶ó‡ßç‡¶®‡¶ø‡¶™‡¶§‡¶ø", "‡¶¶‡ßá‡¶¨‡¶∞": "‡¶¨‡¶â‡¶¶‡¶ø", "‡¶®‡¶®‡¶¶": "‡¶¨‡¶â‡¶¶‡¶ø", "‡¶≠‡¶æ‡¶∏‡ßÅ‡¶∞": "‡¶¨‡¶â‡¶¶‡¶ø", "‡¶¨‡¶â‡¶¶‡¶ø": "‡¶¶‡ßá‡¶¨‡¶∞/‡¶≠‡¶æ‡¶∏‡ßÅ‡¶∞",
                        "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø": "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø" # Default for unknown
                    }
                    
                    inverse_relation_type = inverse_relationships.get(connection['relationship_to_source'], "‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø")
                    
                    db.delete_family_connection(
                        connection['id'], # This is now the source
                        st.session_state.selected_main_voter_id, # This is now the target
                        inverse_relation_type
                    )
                    st.success("‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
                    st.rerun()
    else:
        st.info("‡¶è‡¶á ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶®‡ßá‡¶á‡•§")

