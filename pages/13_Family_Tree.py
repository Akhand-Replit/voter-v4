import streamlit as st
from utils.database import Database
from utils.styling import apply_custom_styling
from datetime import datetime

# --- Page Configuration and Initialization ---
st.set_page_config(page_title="Family Tree", layout="wide")
apply_custom_styling()

# Initialize database connection
db = Database()

# --- Caching ---
@st.cache_data(ttl=60)
def search_voters(query):
    """Cached function to search for voters by name or ID."""
    if not query:
        return []
    search_criteria = {"‡¶®‡¶æ‡¶Æ": query, "‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç": query}
    return db.search_records_advanced(search_criteria)

@st.cache_data(ttl=30)
def get_family_connections(_voter_id):
    """Cached function to get family connections for a specific voter."""
    if _voter_id is None:
        return []
    return db.get_family_connections_for_record(_voter_id)

# --- Helper Functions ---
def get_bidirectional_relationships(relationship_type):
    """Returns the forward and reverse relationship types."""
    relationships = {
        "‡¶™‡¶ø‡¶§‡¶æ": {"source_to_target": "‡¶™‡¶ø‡¶§‡¶æ", "target_to_source": "‡¶∏‡¶®‡ßç‡¶§‡¶æ‡¶®"},
        "‡¶Æ‡¶æ‡¶§‡¶æ": {"source_to_target": "‡¶Æ‡¶æ‡¶§‡¶æ", "target_to_source": "‡¶∏‡¶®‡ßç‡¶§‡¶æ‡¶®"},
        "‡¶∏‡ßç‡¶¨‡¶æ‡¶Æ‡ßÄ": {"source_to_target": "‡¶∏‡ßç‡¶¨‡¶æ‡¶Æ‡ßÄ", "target_to_source": "‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ"},
        "‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ": {"source_to_target": "‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ", "target_to_source": "‡¶∏‡ßç‡¶¨‡¶æ‡¶Æ‡ßÄ"},
        "‡¶õ‡ßá‡¶≤‡ßá": {"source_to_target": "‡¶õ‡ßá‡¶≤‡ßá", "target_to_source": "‡¶™‡¶ø‡¶§‡¶æ"},
        "‡¶Æ‡ßá‡¶Ø‡¶º‡ßá": {"source_to_target": "‡¶Æ‡ßá‡¶Ø‡¶º‡ßá", "target_to_source": "‡¶Æ‡¶æ‡¶§‡¶æ"},
        "‡¶≠‡¶æ‡¶á": {"source_to_target": "‡¶≠‡¶æ‡¶á", "target_to_source": "‡¶≠‡¶æ‡¶á"},
        "‡¶¨‡ßã‡¶®": {"source_to_target": "‡¶¨‡ßã‡¶®", "target_to_source": "‡¶¨‡ßã‡¶®"},
        "‡¶¶‡¶æ‡¶¶‡¶æ": {"source_to_target": "‡¶¶‡¶æ‡¶¶‡¶æ", "target_to_source": "‡¶®‡¶æ‡¶§‡¶ø"},
        "‡¶¶‡¶æ‡¶¶‡ßÄ": {"source_to_target": "‡¶¶‡¶æ‡¶¶‡ßÄ", "target_to_source": "‡¶®‡¶æ‡¶§‡¶®‡¶ø"},
        "‡¶®‡¶æ‡¶§‡¶ø": {"source_to_target": "‡¶®‡¶æ‡¶§‡¶ø", "target_to_source": "‡¶¶‡¶æ‡¶¶‡¶æ"},
        "‡¶®‡¶æ‡¶§‡¶®‡¶ø": {"source_to_target": "‡¶®‡¶æ‡¶§‡¶®‡¶ø", "target_to_source": "‡¶¶‡¶æ‡¶¶‡ßÄ"},
        "‡¶ö‡¶æ‡¶ö‡¶æ": {"source_to_target": "‡¶ö‡¶æ‡¶ö‡¶æ", "target_to_source": "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ"},
        "‡¶ö‡¶æ‡¶ö‡ßÄ": {"source_to_target": "‡¶ö‡¶æ‡¶ö‡ßÄ", "target_to_source": "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø"},
        "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ": {"source_to_target": "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ", "target_to_source": "‡¶ö‡¶æ‡¶ö‡¶æ"},
        "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø": {"source_to_target": "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø", "target_to_source": "‡¶ö‡¶æ‡¶ö‡ßÄ"},
        "‡¶Æ‡¶æ‡¶Æ‡¶æ": {"source_to_target": "‡¶Æ‡¶æ‡¶Æ‡¶æ", "target_to_source": "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá"},
        "‡¶Æ‡¶æ‡¶Æ‡¶ø": {"source_to_target": "‡¶Æ‡¶æ‡¶Æ‡¶ø", "target_to_source": "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø"},
        "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá": {"source_to_target": "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá", "target_to_source": "‡¶Æ‡¶æ‡¶Æ‡¶æ"},
        "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø": {"source_to_target": "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø", "target_to_source": "‡¶Æ‡¶æ‡¶Æ‡¶ø"},
        "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞": {"source_to_target": "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞", "target_to_source": "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á"},
        "‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø": {"source_to_target": "‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø", "target_to_source": "‡¶¨‡¶â‡¶Æ‡¶æ"},
        "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á": {"source_to_target": "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á", "target_to_source": "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞"},
        "‡¶¨‡¶â‡¶Æ‡¶æ": {"source_to_target": "‡¶¨‡¶â‡¶Æ‡¶æ", "target_to_source": "‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø"},
        "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø": {"source_to_target": "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø", "target_to_source": "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø"},
    }
    return relationships.get(relationship_type, {"source_to_target": relationship_type, "target_to_source": "‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø"})

def clear_and_rerun():
    """Clears relevant caches and session state, then reruns the app."""
    get_family_connections.clear()
    search_voters.clear()
    
    keys_to_clear = ['family_search_query', 'new_family_member_data', 'main_voter_radio', 'current_voter_options', 'main_search_results']
    for key in keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]
            
    st.rerun()

# --- Session State Initialization & Callbacks ---
if 'selected_main_voter_id' not in st.session_state:
    st.session_state.selected_main_voter_id = None
if 'main_search_results' not in st.session_state:
    st.session_state.main_search_results = None
if 'current_voter_options' not in st.session_state:
    st.session_state.current_voter_options = {}

def on_voter_selection_change():
    """Callback to update the selected voter ID based on radio button."""
    selected_option_str = st.session_state.main_voter_radio
    voter_options = st.session_state.get('current_voter_options', {})
    
    if selected_option_str == "-- ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® --":
        st.session_state.selected_main_voter_id = None
    elif selected_option_str in voter_options:
        st.session_state.selected_main_voter_id = voter_options[selected_option_str]

# --- UI Rendering ---
st.title("‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßÉ‡¶ï‡ßç‡¶∑ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ üå≥")
st.markdown("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# --- 1. Main Voter Selection (Search-based with Button) ---
st.header("‡ßß. ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
search_col1, search_col2 = st.columns([3, 1])
with search_col1:
    main_voter_search_query = st.text_input("‡¶®‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®:", key="main_voter_search_input")
with search_col2:
    st.write("") # Vertical spacer for alignment
    if st.button("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®", key="main_search_button"):
        with st.spinner("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
            st.session_state.main_search_results = search_voters(main_voter_search_query)
        # Clear previous selection when a new search is made
        st.session_state.selected_main_voter_id = None
        if 'main_voter_radio' in st.session_state:
            del st.session_state['main_voter_radio']

# Display search results only if they exist in the session state
if st.session_state.main_search_results is not None:
    search_results = st.session_state.main_search_results
    if search_results:
        st.session_state.current_voter_options = {f"{voter['‡¶®‡¶æ‡¶Æ']} ({voter['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç'] or 'N/A'}) - ID: {voter['id']}": voter['id'] for voter in search_results}
        options_list = ["-- ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® --"] + list(st.session_state.current_voter_options.keys())
        st.radio(
            "‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
            options=options_list,
            key="main_voter_radio",
            on_change=on_voter_selection_change
        )
    else:
        st.info("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")

# --- Display Selected Voter and Main Logic ---
if st.session_state.selected_main_voter_id:
    main_voter_details = db.get_record_by_id(st.session_state.selected_main_voter_id)
    if main_voter_details:
        with st.container(border=True):
            st.subheader(f"‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞: {main_voter_details['‡¶®‡¶æ‡¶Æ']}")
            col1, col2 = st.columns([1, 2])
            with col1:
                st.image(main_voter_details.get('photo_link', 'https://placehold.co/100x100/EEE/31343C?text=No+Image'), width=100)
            with col2:
                st.write(f"**‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç:** {main_voter_details.get('‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç', 'N/A')}")
                st.write(f"**‡¶™‡¶ø‡¶§‡¶æ:** {main_voter_details.get('‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ', 'N/A')}")
                st.write(f"**‡¶≤‡¶ø‡¶ô‡ßç‡¶ó:** {main_voter_details.get('gender', 'N/A')}")
                st.write(f"**‡¶¨‡¶Ø‡¶º‡¶∏:** {main_voter_details.get('age', 'N/A')}")
        
        st.markdown("---")
        
        # --- 2. Add Family Member ---
        st.header("‡ß®. ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
        RELATIONSHIP_OPTIONS = ["‡¶™‡¶ø‡¶§‡¶æ", "‡¶Æ‡¶æ‡¶§‡¶æ", "‡¶∏‡ßç‡¶¨‡¶æ‡¶Æ‡ßÄ", "‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßÄ", "‡¶õ‡ßá‡¶≤‡ßá", "‡¶Æ‡ßá‡¶Ø‡¶º‡ßá", "‡¶≠‡¶æ‡¶á", "‡¶¨‡ßã‡¶®", "‡¶¶‡¶æ‡¶¶‡¶æ", "‡¶¶‡¶æ‡¶¶‡ßÄ", "‡¶®‡¶æ‡¶§‡¶ø", "‡¶®‡¶æ‡¶§‡¶®‡¶ø", "‡¶ö‡¶æ‡¶ö‡¶æ", "‡¶ö‡¶æ‡¶ö‡ßÄ", "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶æ", "‡¶≠‡¶æ‡¶§‡¶ø‡¶ú‡¶ø", "‡¶Æ‡¶æ‡¶Æ‡¶æ", "‡¶Æ‡¶æ‡¶Æ‡¶ø", "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡ßá", "‡¶≠‡¶æ‡¶ó‡ßç‡¶®‡¶ø", "‡¶∂‡ßç‡¶¨‡¶∂‡ßÅ‡¶∞", "‡¶∂‡¶æ‡¶∂‡ßÅ‡¶°‡¶º‡¶ø", "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶á", "‡¶¨‡¶â‡¶Æ‡¶æ", "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø"]
        tab1, tab2 = st.tabs(["‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®", "‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®"])

        with tab1:
            st.subheader("‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
            search_query = st.text_input("‡¶®‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®:", key="family_search_input")
            if search_query:
                found_members = search_voters(search_query)
                found_members = [m for m in found_members if m['id'] != st.session_state.selected_main_voter_id]
                if found_members:
                    st.write(f"**{len(found_members)} ‡¶ú‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:**")
                    for member in found_members:
                        with st.container(border=True):
                            col_m1, col_m2, col_m3 = st.columns([1, 4, 2])
                            with col_m1:
                                st.image(member.get('photo_link', 'https://placehold.co/60x60/EEE/31343C?text=N/A'), width=60)
                            with col_m2:
                                st.markdown(f"**‡¶®‡¶æ‡¶Æ:** {member['‡¶®‡¶æ‡¶Æ']}<br>**‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç:** {member.get('‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç', 'N/A')}", unsafe_allow_html=True)
                            with col_m3:
                                selected_relation = st.selectbox("‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï:", RELATIONSHIP_OPTIONS, key=f"relation_select_{member['id']}")
                                if st.button("‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®", key=f"add_existing_member_{member['id']}"):
                                    rel_map = get_bidirectional_relationships(selected_relation)
                                    try:
                                        db.add_family_connection(st.session_state.selected_main_voter_id, member['id'], rel_map["source_to_target"])
                                        db.add_family_connection(member['id'], st.session_state.selected_main_voter_id, rel_map["target_to_source"])
                                        db.commit_changes()
                                        st.success(f"{member['‡¶®‡¶æ‡¶Æ']} ‡¶ï‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
                                        clear_and_rerun()
                                    except Exception as e:
                                        db.rollback_changes()
                                        st.error(f"‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {e}. ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§")
                else:
                    st.info("‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
        
        with tab2:
            st.subheader("‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®")
            with st.form("new_family_member_form"):
                name = st.text_input("‡¶®‡¶æ‡¶Æ")
                father_name = st.text_input("‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ")
                voter_no = st.text_input("‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)")
                gender = st.selectbox("‡¶≤‡¶ø‡¶ô‡ßç‡¶ó", ["", "‡¶™‡ßÅ‡¶∞‡ßÅ‡¶∑", "‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ", "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø"])
                relationship_type = st.selectbox("‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï:", RELATIONSHIP_OPTIONS)
                submitted = st.form_submit_button("‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
                if submitted:
                    if not name:
                        st.error("‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§")
                    else:
                        try:
                            family_batch_id = db.add_batch("Family Tree Additions")
                            new_member_data = {"‡¶®‡¶æ‡¶Æ": name, "‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ": father_name, "‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç": voter_no, "gender": gender, "description": "‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßÉ‡¶ï‡ßç‡¶∑ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá"}
                            new_member_id = db.add_record(family_batch_id, "family_tree_manual", new_member_data)
                            rel_map = get_bidirectional_relationships(relationship_type)
                            db.add_family_connection(st.session_state.selected_main_voter_id, new_member_id, rel_map["source_to_target"])
                            db.add_family_connection(new_member_id, st.session_state.selected_main_voter_id, rel_map["target_to_source"])
                            db.commit_changes()
                            st.success(f"‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø '{name}' ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
                            clear_and_rerun()
                        except Exception as e:
                            db.rollback_changes()
                            st.error(f"‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {e}")
        
        st.markdown("---")
        
        # --- 3. Display Family Tree ---
        st.header("‡ß©. ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßÉ‡¶ï‡ßç‡¶∑ ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶®")
        family_connections = get_family_connections(st.session_state.selected_main_voter_id)
        if family_connections:
            st.write(f"**{main_voter_details['‡¶®‡¶æ‡¶Æ']} ‡¶è‡¶∞ ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶ó‡¶£:**")
            for connection in family_connections:
                with st.container(border=True):
                    col_d1, col_d2, col_d3 = st.columns([1, 4, 1.5])
                    with col_d1:
                        st.image(connection.get('photo_link', 'https://placehold.co/60x60/EEE/31343C?text=N/A'), width=60)
                    with col_d2:
                        st.markdown(f"**‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï:** {connection['relationship_to_source']}<br>**‡¶®‡¶æ‡¶Æ:** {connection['‡¶®‡¶æ‡¶Æ']}", unsafe_allow_html=True)
                    with col_d3:
                        if st.button("‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", key=f"delete_connection_{connection['id']}"):
                            try:
                                rel_map = get_bidirectional_relationships(connection['relationship_to_source'])
                                db.delete_family_connection(st.session_state.selected_main_voter_id, connection['id'], rel_map["source_to_target"])
                                db.delete_family_connection(connection['id'], st.session_state.selected_main_voter_id, rel_map["target_to_source"])
                                db.commit_changes()
                                st.success(f"{connection['‡¶®‡¶æ‡¶Æ']} ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
                                clear_and_rerun()
                            except Exception as e:
                                db.rollback_changes()
                                st.error(f"‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {e}")
        else:
            st.info("‡¶è‡¶á ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶®‡ßá‡¶á‡•§")

else:
    st.info("‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶â‡¶™‡¶∞‡ßá ‡¶è‡¶ï‡¶ú‡¶® ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
